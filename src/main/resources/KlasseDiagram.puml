@startuml
' === Pakker ===
package board {
  class Board {
    - tiles: Map<Integer, Tile>
    + setTiles(tiles: Map<Integer, Tile>)
    + getAllTiles(): Collection<Tile>
    + getTile(id: int): Tile
    + getNextTile(currentTile: Tile, roll: int): Tile
  }

  class BoardGame {
    - board: Board
    - players: List<Player>
    - dice: Dice
    - currentPlayerIndex: int
    - gameOver: boolean
    - observers: Set<BoardGameObserver>
    + loadBoard(filePath: String)
    + setTiles(tiles: Map<Integer, Tile>)
    + getStartingTile(): Tile
    + setDice(numberOfDice: int, isQueueBoard: boolean)
    + addPlayer(name: String)
    + playTurn(): TurnResult
    + getCurrentPlayer(): Player
    + addObserver(observer: BoardGameObserver)
    + getPlayers(): List<Player>
    + getDice(): Dice
  }
}

package dice {
  interface Dice {
    + roll(): int
  }

  class DiceLogic {
    - dice: List<Die>
    + DiceLogic(numberOfDice: int)
    + roll(): int
  }

  class Die {
    - maxValue: int
    + Die()
    + Die(maxValue: int)
    + roll(): int
  }
}

package tile {
  class Tile {
    - id: int
    - nextTile: Tile
    - landAction: TileAction
    + getId(): int
    + getNextTile(): Tile
    + setNextTile(next: Tile)
    + setLandAction(action: TileAction)
    + landPlayer(player: Player)
    + leavePlayer(player: Player)
    + isWinningTile(): boolean
  }

  interface TileAction {
    + execute(player: Player)
  }

  class MoveExtraStepsAction {
    - steps: int
    + MoveExtraStepsAction(steps: int)
    + execute(player: Player)
  }

  class RandomTeleportAction {
    - board: Board
    + RandomTeleportAction(board: Board)
    + execute(player: Player)
  }

  class QueueTileAction {
    - currentOccupant: Player
    + execute(player: Player)
  }
}

package player {
  class Player {
    - name: String
    - game: BoardGame
    - currentTile: Tile
    - lastSpecialMoveSteps: int
    - lastActionMessage: String
    + getCurrentTile(): Tile
    + setCurrentTile(tile: Tile)
    + setLastSpecialMoveSteps(steps: int)
    + getLastSpecialMoveSteps(): int
    + setLastActionMessage(msg: String)
    + getLastActionMessage(): String
    + move(steps: int): Tile
    + getName(): String
    + getGame(): BoardGame
  }

  class TurnResult {
    - player: Player
    - roll: int
    - fromTile: Tile
    - toTile: Tile
    - hasWon: boolean
    + getPlayer(): Player
    + toString(): String
  }
}

package config {
  class BoardFileReader {
    + readBoardFromFile(filePath: String, board: Board): Map<Integer, Tile>
  }

  class BoardGameFactory {
    + createSimpleBoard(): BoardGame
    + createPainfulBoard(): BoardGame
    + createQueueBoard(): BoardGame
    + loadBoardFromFile(choice: int): BoardGame
  }

  class PlayerLoader {
    + loadPlayerNamesFromFile(filePath: String): List<String>
  }
}

package gui {
  class BoardGameAppGUI
  class SetupPane
  class GameView
}

package observer {
  interface BoardGameObserver {
    + onPlayerMoved(player: Player, from: Tile, to: Tile, roll: int)
    + onSpecialTile(player: Player, tile: Tile, description: String)
    + onGameWon(winner: Player)
  }
}

package util {
  class JsonParsingException {
    + JsonParsingException(message: String, cause: Throwable)
  }
}

' === Relasjoner ===
BoardGame --> Board
BoardGame --> Dice
BoardGame --> Player
BoardGame --> BoardGameObserver
BoardGame --> TurnResult
BoardGame --> BoardFileReader

Board --> Tile
BoardFileReader --> Board
BoardFileReader --> Tile
BoardFileReader --> MoveExtraStepsAction
BoardFileReader --> RandomTeleportAction

BoardGameFactory --> BoardGame
BoardGameFactory --> Tile
BoardGameFactory --> Board

DiceLogic ..|> Dice
DiceLogic --> Die

Tile --> TileAction
MoveExtraStepsAction ..|> TileAction
RandomTeleportAction ..|> TileAction
QueueTileAction ..|> TileAction

Player --> BoardGame
Player --> Tile

TurnResult --> Player
TurnResult --> Tile

JsonParsingException ..|> RuntimeException

GameView --> BoardGame
GameView --> BoardGameObserver
GameView --> Player
GameView --> Tile

BoardGameAppGUI --> SetupPane
BoardGameAppGUI --> GameView
SetupPane --> PlayerLoader

@enduml
